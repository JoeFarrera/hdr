// DBEstadistica.cpp: implementation of the CDBEstadistica class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "tpc.h"
#include "DBEstadistica.h"
#include "Agv.h"
#include "Orden.h"
#include "macro.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////

// The ORACA=YES option must be specified to enable use of the ORACA
EXEC ORACLE OPTION (ORACA=YES);



//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CDBEstadistica::CDBEstadistica()
{

}

CDBEstadistica::~CDBEstadistica()
{

}

// Grabar o marcar final de un error de Agv
void CDBEstadistica::LogError(CAgv * ptrAgv, UINT nErr, bool fFin, bool fAbort)
{
	T_sqlca sqlca;	// This is static
	T_oraca oraca;
	oraca.orastxtf = ORASTFERR;
	sql_context * ptrCtx = (sql_context *)g_Container.m_dbutil.GetOraContext ();
	EXEC SQL CONTEXT USE :*ptrCtx;
 
	EXEC SQL BEGIN DECLARE SECTION;
	
	 int dbNagv;
	 int dbNummod;
	 int dbNumerr;
	 int dbMp;
	 int dbNmp;
	 int dbWegstr;
	 int dbPosdes;
	 char dbLadodes;
	 int dbPtocomdes;
	 char dbTipfin;
	 int dbCodord;

	EXEC SQL END DECLARE SECTION;

	dbNagv = ptrAgv->m_id;
	dbNummod = ptrAgv->m_pFzdat->errofz[nErr].modul_nr;
	dbNumerr = ptrAgv->m_pFzdat->errofz[nErr].fehler_nr;

	
	EXEC SQL WHENEVER SQLERROR GOTO LogErrorSqlError;
	EXEC SQL WHENEVER NOTFOUND CONTINUE;

	if (ptrAgv->m_pOrden)
		dbCodord = atoi ((char *)ptrAgv->m_pOrden->m_at.id_nr); // Any chance of this failing ?
	else
		dbCodord = 0;

	if (!fFin)
	{
		// Aparece el error
		dbMp = ptrAgv->m_pFzdat->mp;
		dbNmp = ptrAgv->m_pFzdat->nmp;
		dbWegstr = ptrAgv->m_pFzdat->wegstr;
		dbPtocomdes = ptrAgv->m_pFzdat->auftziel.nr;
		dbPosdes = ptrAgv->m_pFzdat->auftziel.pos;
		dbLadodes = ptrAgv->m_pFzdat->auftziel.lage;

		EXEC SQL INSERT INTO ERRAGV 
			(ERRID,      
			 NAGV,      
			 NUMMOD,    
			 NUMERR,    
			 MP,        
			 NMP,       
			 WEGSTR,    
			 PTOCOMDES, 
			 POSDES,    
			 LADODES,   
			 FECCRE,    
			 FECFIN,    
			 TIPFIN,    
			 CODORD)
			SELECT
			ERRAGV_SEQ.NEXTVAL,
			:dbNagv,
			:dbNummod,
			:dbNumerr,
			:dbMp,
			:dbNmp,
			:dbWegstr,
			:dbPtocomdes,
			:dbPosdes,
			:dbLadodes,
			sysdate,
			null,
			'C',	-- En curso
			:dbCodord
			FROM DUAL;

			if (dbCodord)
			{
				// Marcar la orden en error
				EXEC SQL UPDATE ordtran
				SET ERRORD = 'S'
				WHERE CODORD = :dbCodord;
			}
	}
	else
	{
		dbTipfin = fAbort ? 'R' : 'N';

		EXEC SQL UPDATE ERRAGV
			SET FECFIN = sysdate,
			TIPFIN = :dbTipfin
			WHERE NAGV = :dbNagv
			AND NUMMOD = :dbNummod
			AND NUMERR = :dbNumerr
			AND TIPFIN = 'C';

			if (dbCodord)
			{
				// Quitar el error de la orden
				EXEC SQL UPDATE ordtran
				SET ERRORD = 'N'
				WHERE CODORD = :dbCodord;
			}


	}

	EXEC SQL COMMIT;

	return;

LogErrorSqlError:
	MSGERROR4 ("Imposible %s log de errores para Agv: %d NumMod: %d NumErr: %d",
		fFin ? "actualizar" : "insertar",
		dbNagv,
		dbNummod,
		dbNumerr);

	return;
}


// Mover órdenes de transporte al histórico
void CDBEstadistica::ArchivarOrdTran()
{
	sql_context * ptrCtx = (sql_context *)g_Container.m_dbutil.GetOraContext ();
	EXEC SQL CONTEXT USE :*ptrCtx;
 
 	T_sqlca sqlca;	// This is static
	T_oraca oraca;
	oraca.orastxtf = ORASTFERR;
	EXEC SQL WHENEVER SQLERROR GOTO ArchivarOrdTranError;
	EXEC SQL WHENEVER NOTFOUND CONTINUE;

	EXEC SQL EXECUTE
	begin
		map.ArchivarHistOrdTran;
	end;
	END-EXEC;
	// El commit es realizado por el procedure


	return;
	
ArchivarOrdTranError:
	MSGERROR ("Error al archivar Ordenes de Transporte");

	return;
}


// Grabar o quitar un defecto
void CDBEstadistica::LogDefecto(UINT nZona, UINT nIndMesa, UINT nBit, bool fFin, bool fAbort)
{
	sql_context * ptrCtx = (sql_context *)g_Container.m_dbutil.GetOraContext ();
	EXEC SQL CONTEXT USE :*ptrCtx;
 	T_sqlca sqlca;	// This is static
	T_oraca oraca;
	oraca.orastxtf = ORASTFERR;
	EXEC SQL BEGIN DECLARE SECTION;
	
	int dbZona;
	int dbInd;
	int dbBit;
	char dbTipFin;

	EXEC SQL END DECLARE SECTION;

	dbZona = nZona;
	dbInd = nIndMesa;
	dbBit = nBit;

    EXEC SQL WHENEVER SQLERROR DO plsql_error("LogDefecto: ", sqlca, oraca);
	EXEC SQL WHENEVER NOTFOUND CONTINUE;

	if (fFin)
	{
		if (fAbort)
			dbTipFin = 'R';
		else
			dbTipFin = 'N';

		EXEC SQL UPDATE DEFECTO
			SET fecfin = sysdate,
				tipfin = :dbTipFin
			WHERE ZONA = :dbZona
			AND IND = :dbInd
			AND BIT = :dbBit
			AND TIPFIN = 'C';
		
	}
	else
		{
		dbTipFin = 'C';	// En curso
		EXEC SQL INSERT INTO DEFECTO 
			(ZONA,
			IND, 	
			BIT,
			FECCRE,
			FECFIN, 	
			TIPFIN)
		SELECT
			:dbZona,
			:dbInd,
			:dbBit,
			sysdate,
			null,
			:dbTipFin
			FROM dual;
		}
	
	EXEC SQL COMMIT;

}


bool CDBEstadistica::GetStringsDefecto(UINT nZona, UINT nIndMesa, UINT nBit, LPTSTR strCodMes, LPTSTR strCodClInd, LPTSTR strDefecto)
{
	sql_context * ptrCtx = (sql_context *)g_Container.m_dbutil.GetOraContext ();
	EXEC SQL CONTEXT USE :*ptrCtx;
 	T_sqlca sqlca;	// This is static
	T_oraca oraca;
	oraca.orastxtf = ORASTFERR;
    EXEC SQL WHENEVER SQLERROR DO plsql_error("GetStringsDefecto: ", sqlca, oraca);
	EXEC SQL WHENEVER NOTFOUND GOTO GetStringsDefectoNotFound;

	bool fRetVal = false;

	EXEC SQL BEGIN DECLARE SECTION;

	
	char * dbCodClInd;
	int dbZona;
	int dbInd;
	char * dbCodMes;
	char * dbTexto;
	int dbBit;

	short idbCodClInd = -1;
	short idbCodMes = -1;
	short idbTexto = -1;


	EXEC SQL END DECLARE SECTION;



	dbZona = nZona;
	dbInd = nIndMesa;
	dbBit = nBit;
	dbCodClInd = strCodClInd;

	dbCodMes = strCodMes;
	dbTexto = strDefecto;

	EXEC SQL DECLARE CURDEF CURSOR FOR
		SELECT CODCLIND,
				CODMES,
				TEXTO
		FROM DEFMESA, DEFTEXT
		WHERE DEFMESA.ZONA = :dbZona
		AND DEFMESA.IND = :dbInd
		AND DEFTEXT.BIT = :dbBit;

	EXEC SQL OPEN CURDEF;

	EXEC SQL FETCH CURDEF INTO 
		:dbCodClInd:idbCodClInd,
		:dbCodMes:idbCodMes,
		:dbTexto:idbTexto;

	fRetVal = true;

GetStringsDefectoNotFound:

	EXEC SQL CLOSE CURDEF;
	
	return (fRetVal);
}



void CDBEstadistica::BorrarHistoricos()
{
	sql_context * ptrCtx = (sql_context *)g_Container.m_dbutil.GetOraContext ();
	EXEC SQL CONTEXT USE :*ptrCtx;
 	T_sqlca sqlca;	// This is static
	T_oraca oraca;
	oraca.orastxtf = ORASTFERR;
	EXEC SQL WHENEVER SQLERROR DO plsql_error("CDBEstadistica::BorrarHistoricos-> ", sqlca, oraca);
	EXEC SQL WHENEVER NOTFOUND CONTINUE;
	
	MSGTRACE ("BorrarHistoricos");
	
	EXEC SQL EXECUTE
	begin
		map.BorrarHistoricos;		
	end;
	END-EXEC;


}
